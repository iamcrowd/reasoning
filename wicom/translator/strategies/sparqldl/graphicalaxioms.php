<?php
/*

   Copyright 2018 GILIA

   Author: GILIA

   graphicalaxioms.php

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Wicom\Translator\Strategies\SPARQLDL;


use \XMLReader;
use \SimpleXMLElement;
use \SimpleXMLIterator;
use \XMLWriter;

/**
  This class parses an OWL Document in order to extract an ontology from them and returns
  an intermediate representation for each OWL 2 axiom. It also parses graphical annotations.

  protected $sub = [];
  protected $sub_total = [];
  protected $sub_partial = [];
  protected $sub_disj = [];
  protected $rel_without_class = [];
  protected $equivalence = [];
  protected $disjointness = [];

*/

class GraphicalAxioms {

  protected $classes = [];
  protected $objectproperties = [];
  protected $dataproperties = [];
  protected $domain = [];
  protected $range = [];
  protected $strictsubclassaxioms = [];
  protected $strictsubobjectpropertyaxioms = [];
  protected $domaindp = [];
  protected $rangedp = [];
  protected $eqclasses = [];
  protected $disjclasses = [];
  protected $eqobjectproperties = [];
  protected $disjobjectproperties = [];

  function __construct(){
    $this->classes = [];
    $this->objectproperties = [];
    $this->dataproperties = [];
    $this->domain = [];
    $this->domaindp = [];
    $this->range = [];
    $this->rangedp = [];
    $this->strictsubclassaxioms = [];
    $this->strictsubobjectpropertyaxioms = [];
    $this->eqclasses = [];
    $this->disjclasses = [];
    $this->eqobjectproperties = [];
    $this->disjobjectproperties = [];

  }

  function prepareClassAxioms($pattern, $classaxioms){
    $this->classes = [$pattern => $classaxioms];
  }

  function prepareObjectPropertyAxioms($pattern, $objpropaxioms){
    $this->objectproperties = [$pattern => $objpropaxioms];
  }

  function prepareDataPropertyAxioms($pattern, $datapropaxioms){
    $this->dataproperties = [$pattern => $datapropaxioms];
  }

  function prepareDomainAxioms($pattern, $domainaxioms){
    $this->domain = [$pattern => $domainaxioms];
  }

  function prepareDomainDataPropertyAxioms($pattern, $domaindpaxioms){
    $this->domaindp = [$pattern => $domaindpaxioms];
  }

  function prepareRangeAxioms($pattern, $rangeaxioms){
    $this->range = [$pattern => $rangeaxioms];
  }

  function prepareRangeDataPropertyAxioms($pattern, $rangedpaxioms){
    $this->rangedp = [$pattern => $rangedpaxioms];
  }

  function prepareStrictSubClassAxioms($pattern, $strictsubclassaxioms){
    $this->strictsubclassaxioms = [$pattern => $strictsubclassaxioms];
  }

  function prepareStrictSubObjectPropertyAxioms($pattern, $strictsubobjectpropertyaxioms){
    $this->strictsubobjectpropertyaxioms = [$pattern => $strictsubobjectpropertyaxioms];
  }

  function prepareEquivalentClassAxioms($pattern, $equivalentaxioms){
    $this->eqclasses = [$pattern => $equivalentaxioms];
  }

  function prepareDisjointClassAxioms($pattern, $disjointaxioms){
    $this->disjclasses = [$pattern => $disjointaxioms];
  }

  function prepareEquivalentObjectPropertyAxioms($pattern, $equivalentaxioms){
    $this->eqobjectproperties = [$pattern => $equivalentaxioms];
  }

  function prepareDisjointObjectPropertyAxioms($pattern, $disjointaxioms){
    $this->disjobjectproperties = [$pattern => $disjointaxioms];
  }

  function getClass(){
    return $this->classes;
  }

  function getStrictSubClass(){
    return $this->strictsubclassaxioms;
  }

  function getObjectProperty(){
    return $this->objectproperties;
  }

  function getDomain(){
    return $this->domain;
  }

  function getRange(){
    return $this->range;
  }

  function getEqClasses(){
    return $this->eqclasses;
  }

  function getDataProperty(){
    return $this->dataproperties;
  }

  function getDataPropertyDomain(){
    return $this->domaindp;
  }

  function getDataPropertyRange(){
    return $this->rangedp;
  }


  /**
     The string generated by to_json() is like the following.

     @code{.json}
     {
         "Class": ["name1", "name2"]
         },
         "ObjectProperty": ["name3", "name4"]
         },
         "Domain": [{"objectproperty" : "class domain"}, {"objectproperty" : "class domain_2"}]
         },
         "Range": [{"objectproperty" : "class range"}, {"objectproperty" : "class range_2"}]
         }
         "DataProperty": ["name1", "name2"]
         },
         "DomainDataProperty": ["name3", "name4"]
         }
         "RangeDataProperty": ["name1", "name2"]
         },
         "StrictSubClassOf": ["name3", "name4"]
         }
         "StrictSubPropertyOf": ["name1", "name2"]
         },
         "EquivalentClass": ["name3", "name4"]
         },
         "DisjointWithClass": ["name1", "name2"]
         }
     }
     @endcode
    */

  function to_json(){
    return json_encode([
        $this->classes,
        $this->objectproperties,
        $this->domain,
        $this->range,
        $this->dataproperties,
        $this->domaindp,
        $this->rangedp,
        $this->strictsubclassaxioms,
        $this->strictsubobjectpropertyaxioms,
        $this->eqclasses,
        $this->disjclasses,
        $this->eqobjectproperties,
        $this->disjobjectproperties
        ]
    );
  }

}
